// Copyright 2018-2020 Twitter, Inc.
// Licensed under the MoPub SDK License Agreement
// http://www.mopub.com/legal/sdk-license-agreement/

apply from: 'shared-build.gradle'
ext {// ext is a gradle closure allowing the declaration of global properties
    PUBLISH_GROUP_ID = "mobi.idealabs"
    PUBLISH_ARTIFACT_ID = 'mopub-sdk'
    PUBLISH_VERSION = "1.0.0"
}
dependencies {
    api project(':mopub-sdk:mopub-sdk-base')
    api project(':mopub-sdk:mopub-sdk-banner')
    api project(':mopub-sdk:mopub-sdk-interstitial')
    api project(':mopub-sdk:mopub-sdk-rewardedvideo')
    api project(':mopub-sdk:mopub-sdk-native-static')
    api project(':mopub-sdk:mopub-sdk-native-video')

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.robolectric:robolectric:4.3'
    testImplementation 'org.robolectric:shadows-httpclient:4.3'
    testImplementation 'com.squareup:fest-android:1.0.7'
    testImplementation 'org.mockito:mockito-core:1.10.19'
    testImplementation 'org.apache.commons:commons-lang3:3.9'

    ['powermock-api-mockito',
     'powermock-core',
     'powermock-module-junit4',
     'powermock-module-junit4-rule',
     'powermock-classloading-xstream'].each {
        testImplementation ("org.powermock:${it}:1.7.4") {
            exclude group: 'org.mockito', module: 'mockito-core'
        }
    }
}

android {
    useLibrary 'org.apache.http.legacy'

    testOptions {
        unitTests {
            includeAndroidResources = true
        }

        // separate block is necessary for Robolectric properties.
        unitTests.all {
            def sdkVersionsToTest = "${System.env.ROBOELECTRIC_TEST_API_VERSIONS}"

            if (sdkVersionsToTest
                    && !sdkVersionsToTest.allWhitespace
                    && sdkVersionsToTest.toString() != "null") {
                systemProperty 'robolectric.enabledSdks', sdkVersionsToTest
            }
        }
    }
}

project.description = 'MoPub Android SDK'
project.ext.displayName = 'MoPub Android SDK'
project.ext.projectName = 'mopub-sdk'
project.ext.uploadName = 'mopub-android-sdk'
apply from: 'publisher.gradle'

task buildAar(dependsOn: [':mopub-sdk:assembleRelease']) {
    //声明顺序不代表执行顺序，默认是alpha字母从小到大执行
    finalizedBy ':mopub-sdk:mopub-sdk-base:assembleRelease',
            ':mopub-sdk:mopub-sdk-banner:assembleRelease',
            ':mopub-sdk:mopub-sdk-interstitial:assembleRelease',
            ':mopub-sdk:mopub-sdk-rewardedvideo:assembleRelease',
            ':mopub-sdk:mopub-sdk-native-static:assembleRelease',
            ':mopub-sdk:mopub-sdk-native-video:assembleRelease'
}

task buildSdk(type: Copy, dependsOn: buildAar) {

//    from('build/outputs/aar') {
//        include '*-release.aar'
//    }
    from('../mopub-sdk/mopub-sdk-base/build/outputs/aar') {
        include '*-release.aar'
    }
    from('../mopub-sdk/mopub-sdk-banner/build/outputs/aar') {
        include '*-release.aar'
    }
    from('../mopub-sdk/mopub-sdk-interstitial/build/outputs/aar') {
        include '*-release.aar'
    }
    from('../mopub-sdk/mopub-sdk-rewardedvideo/build/outputs/aar') {
        include '*-release.aar'
    }
    from('../mopub-sdk/mopub-sdk-native-static/build/outputs/aar') {
        include '*-release.aar'
    }
    from('../mopub-sdk/mopub-sdk-native-video/build/outputs/aar') {
        include '*-release.aar'
    }
    into '../aar'
    doLast {
        println("sdk构建完成->${destinationDir}")
    }

}

task uploadAllMopubAar(){
    finalizedBy ':mopub-sdk:mopub-sdk-base:uploadArchives',
            ':mopub-sdk:mopub-sdk-banner:uploadArchives',
            ':mopub-sdk:mopub-sdk-interstitial:uploadArchives',
            ':mopub-sdk:mopub-sdk-rewardedvideo:uploadArchives',
            ':mopub-sdk:mopub-sdk-native-static:uploadArchives',
            ':mopub-sdk:mopub-sdk-native-video:uploadArchives'
}